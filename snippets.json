{"Ecto: Changeset optional attrs":{"body":["optional_attrs = [$0]"],"prefix":["eoa","optional"],"scope":"elixir,phoenix-heex,html"},"Ecto: Changeset required attrs":{"body":["required_attrs = [$0]"],"prefix":["era","req","required"],"scope":"elixir,phoenix-heex,html"},"Ecto: changeset":{"body":["def changeset(${1:name}, attrs) do","  required_attrs = [$2]","  optional_attrs = [$3]","","  ${1:name}","  |> cast(attrs, required_attrs ++ optional_attrs)","  |> validate_required(required_attrs)","end",""],"prefix":["defec"],"scope":"elixir,phoenix-heex,html"},"LiveView: @impl Phoenix.LiveComponent":{"body":["@impl Phoenix.LiveComponent"],"prefix":["lvlc","lc","@impl"],"scope":"elixir,phoenix-heex,html"},"LiveView: @impl Phoenix.LiveView":{"body":["@impl Phoenix.LiveView"],"prefix":["lv","lvimpl","@impl"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent assign_helper":{"body":["def assign_$1(socket, $1) do","  assign(socket, $1: $1)","end"],"prefix":["lv","lvlc"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent call":{"body":["<.live_component","  module={$1}","  id={\"$2\"}","  $0","/>"],"prefix":["lv","lvlc","<.live_"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent handle_event":{"body":["@impl Phoenix.LiveComponent","def handle_event(${1:event}, ${2:unsigned_params}, ${3:socket}) do","  $0","","  ${4:{:noreply, socket}}","end"],"prefix":["lvlc","lvlche"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent update":{"body":["@impl Phoenix.LiveComponent","def update(${1:assigns}, ${2:socket}) do","  $0","","  {:ok, socket}","end"],"prefix":["lvlc","lvlcu"],"scope":"elixir,phoenix-heex,html"},"LiveView: Render slot":{"body":["<%= render_slot(${1:@inner_block}) %>"],"prefix":["<%= r"],"scope":"elixir,phoenix-heex,html"},"LiveView: handle_info":{"body":["@impl Phoenix.LiveView","def handle_info(${1:message}, ${2:socket}) do","  $0","","  {:noreply, ${3:socket}}","end"],"prefix":["lv","lvhi","def","def handle_info"],"scope":"elixir,phoenix-heex,html"},"LiveView: new LiveView module":{"body":["defmodule $1 do","  use $2, :live_view","","  @impl Phoenix.LiveView","  def render(assigns) do","    ~H\"\"\"","    $0","    \"\"\"","  end","","  @impl Phoenix.LiveView","  def mount(${3: params}, ${4: session}, ${5: socket}) do","    $6","    {:ok, socket}","  end","end"],"prefix":["lv","defmlv"],"scope":"elixir,phoenix-heex,html"},"LiveView: render":{"body":["@impl Phoenix.LiveView","def render(${1:assigns}) do","  ~H\"\"\"","  $0","  \"\"\"","end",""],"prefix":["lv","lvr","deflvr"],"scope":"elixir,phoenix-heex,html"},"LiveView: socket destructure":{"body":["%{ assigns: %{$1} } = $0"],"prefix":["lv","lvsd"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Commponent definition":{"body":["def ${1:component}(${2:assigns}) do","  ~H\"\"\"","  $3","  \"\"\"","end"],"prefix":["defpcd"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context change":{"body":["@doc \"\"\"","Returns an `%Ecto.Changeset{}` for tracking $1 changes.","","## Examples","","    iex> change_$1(%{field: value})","    %Ecto.Changeset{data: %${1/(.*)/${1:/pascalcase}/}{}}","","\"\"\"","def change_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1, attrs \\\\\\\\ %{} ) do","  ${1/(.*)/${1:/pascalcase}/}.changeset($1, attrs)","end",""],"prefix":["pc"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context create":{"body":["@doc \"\"\"","Creates a $1.","","## Examples","","    iex> create_$1(%{field: value})","    {:ok, %${1/(.*)/${1:/pascalcase}/}{}}","","    iex> create_$1(%{field: bad_value})","    {:error, ...}","","\"\"\"","def create_${1:name}(attrs \\\\\\\\ %{}) do","  %${1/(.*)/${1:/pascalcase}/}{}","  |> ${1/(.*)/${1:/pascalcase}/}.changeset(attrs)","  |> Repo.insert()","end",""],"prefix":["pc"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context delete":{"body":["@doc \"\"\"","  Deletes a $1.","","  ## Examples","","      iex> delete_$1($1)","      {:ok, %${1/(.*)/${1:/pascalcase}/}{}}","","      iex> delete_$1($1)","      {:error, %Ecto.Changeset{}}","\"\"\"","def delete_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1) do","  Repo.delete($1)","end",""],"prefix":["pc"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context get":{"body":["@doc \"\"\"","Gets a single $1.","","## Examples","","    iex> get_$1!(123)","    %${1/(.*)/${1:/pascalcase}/}{}","","    iex> get_$1!(456)","    ** (Ecto.NoResultsError)","","\"\"\"","def get_${1:name}!(id) do","  Repo.get!(${1/(.*)/${1:/pascalcase}/}, id)","end",""],"prefix":["pc"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context list":{"body":["@doc \"\"\"","Returns the list of $1s.","","## Examples","","    iex> list_$1()","    [%${1/(.*)/${1:/pascalcase}/}{}, ...]","","\"\"\"","def list_${1:name}s do","  Repo.all(${1/(.*)/${1:/pascalcase}/})","end",""],"prefix":["pc"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context update":{"body":["@doc \"\"\"","Updates a $1.","","## Examples","","    iex> update_$1(%{field: value})","    {:ok, %${1/(.*)/${1:/pascalcase}/}{}}","","    iex> update_$1(%{field: bad_value})","    {:error, %Ecto.Chnageset{}}","","\"\"\"","def update_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1, attrs) do","  $1","  |> ${1/(.*)/${1:/pascalcase}/}.changeset(attrs)","  |> Repo.update()","end",""],"prefix":["pc"],"scope":"elixir,phoenix-heex,html"},"eex: Comment":{"body":["<%# $0 %>"],"prefix":["<%#"],"scope":"elixir,phoenix-heex,html"},"eex: Replace with result":{"body":["<%= $0 %>"],"prefix":["<%="],"scope":"elixir,phoenix-heex,html"},"eex: Return contents":{"body":["<%% $0 %>"],"prefix":["<%%"],"scope":"elixir,phoenix-heex,html"},"eex: case":{"body":["<% case $1 do %>","  <% $2 -> %>","<% end %>"],"prefix":["eecase","<% case"],"scope":"elixir,phoenix-heex,html"},"eex: cond":{"body":["<%= cond do %>","  <% $1 -> %>","    $2","<% end %>"],"prefix":["eecond","<% cond"],"scope":"elixir,phoenix-heex,html"},"eex: for":{"body":["<%= for $2 <- $1 do %>","  $0","<% end %>"],"prefix":["eefor","<% for"],"scope":"elixir,phoenix-heex,html"},"eex: if":{"body":["<%= if $1 do %>","  $0","<% end %>"],"prefix":["eeif","<% if"],"scope":"elixir,phoenix-heex,html"},"eex: inline with output":{"body":["<% $0 %>"],"prefix":["<%"],"scope":"elixir,phoenix-heex,html"}}