{"Ecto: Changeset optional attrs":{"body":["optional_attrs = [$0]"],"prefix":["eoa","optional"],"scope":"elixir"},"Ecto: Changeset required attrs":{"body":["required_attrs = [$0]"],"prefix":["era","req","required"],"scope":"elixir"},"Ecto: Context change":{"body":["def change_${1:name}(%${2:struct}{} = $3, attrs \\\\\\\\\\\\\\\\ %{}) do","  ${3} |> $4(attrs)","end"],"prefix":["defecc"],"scope":"elixir"},"Ecto: Context update":{"body":["def update_${1:name}(%${2:struct}{} = $3, attrs \\\\\\\\\\\\\\\\ %{}) do","  ${3} |> $4(attrs) |> Repo.update()","end"],"prefix":["defecu"],"scope":"elixir"},"Ecto: changeset":{"body":["def changeset(${1:name}, attrs) do","  required_attrs = [$2]","  optional_attrs = [$3]","","  ${1:name}","  |> add_account_id()","  |> cast(attrs, required_attrs ++ optional_attrs)","  |> validate_required(required_attrs)","end"],"prefix":["defec"],"scope":"elixir"},"LiveView: Render slot":{"body":["<%= render_slot(${1:@inner_block}) %>"],"prefix":["<%= r"],"scope":"elixir"},"LiveView: new LiveView module":{"body":["defmodule $1 do","  use $2, :live_view","","  def render(assigns) do","    ~H\"\"\"","    $0","    \"\"\"","  end","","  def mount(${3: params}, ${4: session}, ${5: socket}) do","    $6","    {:ok, socket}","  end","end"],"prefix":["defmlv"],"scope":"elixir"},"LiveView: render":{"body":["def render(${1:assigns}) do","  ~H\"\"\"","  $0","  \"\"\"","end",""],"prefix":["lvr","deflvr"],"scope":"elixir"},"LiveView: socket destructure":{"body":["%{ assigns: %{$1} } = $0"],"prefix":["lvsd"],"scope":"elixir"},"Phoenix: Commponent definition":{"body":["def ${1:component}(${2:assigns}) do","  ~H\"\"\"","  $3","  \"\"\"","end"],"prefix":["defpcd"],"scope":"elixir"},"eex: Comment":{"body":["<%# $0 %>"],"prefix":["<%#"],"scope":"elixir"},"eex: Replace with result":{"body":["<%= $0 %>"],"prefix":["<%="],"scope":"elixir"},"eex: Return contents":{"body":["<%% $0 %>"],"prefix":["<%%"],"scope":"elixir"},"eex: case":{"body":["<% case $1 do %>","  <% $2 -> %>","<% end %>"],"prefix":["eecase","<% case"],"scope":"elixir"},"eex: cond":{"body":["<%= cond do %>","  <% $1 -> %>","    $2","<% end %>"],"prefix":["eecond","<% cond"],"scope":"elixir"},"eex: for":{"body":["<%= for $2 <- $1 do %>","  $0","<% end %>"],"prefix":["eefor","<% for"],"scope":"elixir"},"eex: if":{"body":["<%= if $1 do %>","  $0","<% end %>"],"prefix":["eeif","<% if"],"scope":"elixir"},"eex: inline with output":{"body":["<% $0 %>"],"prefix":["<%"],"scope":"elixir"}}