{"eex: for":{"body":["<%= for $2 <- $1 do %>","  $0","<% end %>"],"description":"<%= for $2 <- $1 do %>\n  $0\n<% end %>","prefix":["plvs","eex","eexfor","<% for"],"scope":"elixir,phoenix-heex,html"},"Ecto: Schema changeset required attrs":{"body":["required_attrs = [$0]"],"description":"required_attrs = [$0]","prefix":["plvs","es","escra"],"scope":"elixir,phoenix-heex,html"},"LiveView: New LiveView module":{"body":["defmodule $1 do","  use $2, :live_view","","  @impl Phoenix.LiveView","  def render(assigns) do","    ~H\"\"\"","    $0","    \"\"\"","  end","","  @impl Phoenix.LiveView","  def mount(${3: params}, ${4: session}, ${5: socket}) do","    $6","    {:ok, socket}","  end","end"],"description":"defmodule $1 do\n  use $2, :live_view\n\n  @impl Phoenix.LiveView\n  def render(assigns) do\n    ~H\"\"\"\n    $0\n    \"\"\"\n  end\n\n  @impl Phoenix.LiveView\n  def mount(${3: params}, ${4: session}, ${5: socket}) do\n    $6\n    {:ok, socket}\n  end\nend","prefix":["plvs","plv","plvnlvm"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent mount":{"body":["@impl Phoenix.LiveComponent","def mount(${$1:socket}) do","  $0","  {:ok, ${2:socket}}","end",""],"description":"@impl Phoenix.LiveComponent\ndef mount(${$1:socket}) do\n  $0\n  {:ok, ${2:socket}}\nend\n","prefix":["plvs","plc","plcm"],"scope":"elixir,phoenix-heex,html"},"eex: Comment":{"body":["<%# $0 %>"],"description":"<%# $0 %>","prefix":["plvs","eex","eexc","<%#"],"scope":"elixir,phoenix-heex,html"},"LiveView: @impl Phoenix.LiveComponent":{"body":["@impl Phoenix.LiveComponent"],"description":"@impl Phoenix.LiveComponent","prefix":["plvs","plv","@impl"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent render":{"body":["@impl Phoenix.LiveComponent","def render(${1:assigns}) do","  ~H\"\"\"","  $0","  \"\"\"","end",""],"description":"@impl Phoenix.LiveComponent\ndef render(${1:assigns}) do\n  ~H\"\"\"\n  $0\n  \"\"\"\nend\n","prefix":["plvs","plc","plcr"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent handle_event":{"body":["@impl Phoenix.LiveComponent","def handle_event(${1:event}, ${2:unsigned_params}, ${3:socket}) do","  $0","","  ${4:{:noreply, socket}}","end"],"description":"@impl Phoenix.LiveComponent\ndef handle_event(${1:event}, ${2:unsigned_params}, ${3:socket}) do\n  $0\n\n  ${4:{:noreply, socket}}\nend","prefix":["plvs","plc","plche"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context update":{"body":["@doc \"\"\"","Updates a $1.","","## Examples","","    iex> update_$1(%{field: value})","    {:ok, %${1/(.*)/${1:/pascalcase}/}{}}","","    iex> update_$1(%{field: bad_value})","    {:error, %Ecto.Chnageset{}}","","\"\"\"","def update_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1, attrs) do","  $1","  |> ${1/(.*)/${1:/pascalcase}/}.changeset(attrs)","  |> Repo.update()","end",""],"description":"@doc \"\"\"\nUpdates a $1.\n\n## Examples\n\n    iex> update_$1(%{field: value})\n    {:ok, %${1/(.*)/${1:/pascalcase}/}{}}\n\n    iex> update_$1(%{field: bad_value})\n    {:error, %Ecto.Chnageset{}}\n\n\"\"\"\ndef update_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1, attrs) do\n  $1\n  |> ${1/(.*)/${1:/pascalcase}/}.changeset(attrs)\n  |> Repo.update()\nend\n","prefix":["plvs","pctx","pctxu"],"scope":"elixir,phoenix-heex,html"},"eex: if":{"body":["<%= if $1 do %>","  $0","<% end %>"],"description":"<%= if $1 do %>\n  $0\n<% end %>","prefix":["plvs","eex","eexif","<% if"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context delete":{"body":["@doc \"\"\"","  Deletes a $1.","","  ## Examples","","      iex> delete_$1($1)","      {:ok, %${1/(.*)/${1:/pascalcase}/}{}}","","      iex> delete_$1($1)","      {:error, %Ecto.Changeset{}}","\"\"\"","def delete_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1) do","  Repo.delete($1)","end",""],"description":"@doc \"\"\"\n  Deletes a $1.\n\n  ## Examples\n\n      iex> delete_$1($1)\n      {:ok, %${1/(.*)/${1:/pascalcase}/}{}}\n\n      iex> delete_$1($1)\n      {:error, %Ecto.Changeset{}}\n\"\"\"\ndef delete_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1) do\n  Repo.delete($1)\nend\n","prefix":["plvs","pctx","pctxd"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context list":{"body":["@doc \"\"\"","Returns the list of $1s.","","## Examples","","    iex> list_$1()","    [%${1/(.*)/${1:/pascalcase}/}{}, ...]","","\"\"\"","def list_${1:name}s do","  Repo.all(${1/(.*)/${1:/pascalcase}/})","end",""],"description":"@doc \"\"\"\nReturns the list of $1s.\n\n## Examples\n\n    iex> list_$1()\n    [%${1/(.*)/${1:/pascalcase}/}{}, ...]\n\n\"\"\"\ndef list_${1:name}s do\n  Repo.all(${1/(.*)/${1:/pascalcase}/})\nend\n","prefix":["plvs","pctx","pctxl"],"scope":"elixir,phoenix-heex,html"},"LiveView: @impl Phoenix.LiveView":{"body":["@impl Phoenix.LiveView"],"description":"@impl Phoenix.LiveView","prefix":["plvs","plv","@impl"],"scope":"elixir,phoenix-heex,html"},"Ecto: Schema changeset optional attrs":{"body":["optional_attrs = [$0]"],"description":"optional_attrs = [$0]","prefix":["plvs","es","esoa"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Phoenix.Component.form/1":{"body":["<.form","  for={${1:@changeset}}","  let={${2:form}}","  phx-change=\"${3:validate}\"","  phx-submit=\"${4:submit}\"",">","  $0","</.form>",""],"description":"<.form\n  for={${1:@changeset}}\n  let={${2:form}}\n  phx-change=\"${3:validate}\"\n  phx-submit=\"${4:submit}\"\n>\n  $0\n</.form>\n","prefix":["plvs","pc","pcf"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent preload":{"body":["@impl Phoenix.LiveComponent","def preload(${1:list_of_assigns}) do","  $0","  $1","end",""],"description":"@impl Phoenix.LiveComponent\ndef preload(${1:list_of_assigns}) do\n  $0\n  $1\nend\n","prefix":["plvs","plc","plcp"],"scope":"elixir,phoenix-heex,html"},"Ecto: Schema changeset":{"body":["def changeset(${1:name}, attrs) do","  required_attrs = [$2]","  optional_attrs = [$3]","","  ${1:name}","  |> cast(attrs, required_attrs ++ optional_attrs)","  |> validate_required(required_attrs)","end",""],"description":"def changeset(${1:name}, attrs) do\n  required_attrs = [$2]\n  optional_attrs = [$3]\n\n  ${1:name}\n  |> cast(attrs, required_attrs ++ optional_attrs)\n  |> validate_required(required_attrs)\nend\n","prefix":["plvs","es","esc"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context get":{"body":["@doc \"\"\"","Gets a single $1.","","## Examples","","    iex> get_$1!(123)","    %${1/(.*)/${1:/pascalcase}/}{}","","    iex> get_$1!(456)","    ** (Ecto.NoResultsError)","","\"\"\"","def get_${1:name}!(id) do","  Repo.get!(${1/(.*)/${1:/pascalcase}/}, id)","end",""],"description":"@doc \"\"\"\nGets a single $1.\n\n## Examples\n\n    iex> get_$1!(123)\n    %${1/(.*)/${1:/pascalcase}/}{}\n\n    iex> get_$1!(456)\n    ** (Ecto.NoResultsError)\n\n\"\"\"\ndef get_${1:name}!(id) do\n  Repo.get!(${1/(.*)/${1:/pascalcase}/}, id)\nend\n","prefix":["plvs","pctx","pctxg"],"scope":"elixir,phoenix-heex,html"},"LiveView: Render slot":{"body":["<%= render_slot(${1:@inner_block}) %>"],"description":"<%= render_slot(${1:@inner_block}) %>","prefix":["plvs","plvrs"],"scope":"elixir,phoenix-heex,html"},"eex: inline with output":{"body":["<% $0 %>"],"description":"<% $0 %>","prefix":["plvs","eex","<%"],"scope":"elixir,phoenix-heex,html"},"LiveView: handle_info":{"body":["@impl Phoenix.LiveView","def handle_info(${1:message}, ${2:socket}) do","  $0","","  {:noreply, ${3:socket}}","end"],"description":"@impl Phoenix.LiveView\ndef handle_info(${1:message}, ${2:socket}) do\n  $0\n\n  {:noreply, ${3:socket}}\nend","prefix":["plvs","plv","plvhi"],"scope":"elixir,phoenix-heex,html"},"LiveView: socket destructure":{"body":["%{ assigns: %{$1} } = $0"],"description":"%{ assigns: %{$1} } = $0","prefix":["plvs","plv","plvsd"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent call":{"body":["<.live_component","  module={$1}","  id={\"$2\"}","  $0","/>",""],"description":"<.live_component\n  module={$1}\n  id={\"$2\"}\n  $0\n/>\n","prefix":["plvs","plc","plcc"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context change":{"body":["@doc \"\"\"","Returns an `%Ecto.Changeset{}` for tracking $1 changes.","","## Examples","","    iex> change_$1(%{field: value})","    %Ecto.Changeset{data: %${1/(.*)/${1:/pascalcase}/}{}}","","\"\"\"","def change_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1, attrs \\\\\\\\ %{} ) do","  ${1/(.*)/${1:/pascalcase}/}.changeset($1, attrs)","end",""],"description":"@doc \"\"\"\nReturns an `%Ecto.Changeset{}` for tracking $1 changes.\n\n## Examples\n\n    iex> change_$1(%{field: value})\n    %Ecto.Changeset{data: %${1/(.*)/${1:/pascalcase}/}{}}\n\n\"\"\"\ndef change_${1:name}(%${1/(.*)/${1:/pascalcase}/}{} = $1, attrs \\\\\\\\ %{} ) do\n  ${1/(.*)/${1:/pascalcase}/}.changeset($1, attrs)\nend\n","prefix":["plvs","pctx","pctxch"],"scope":"elixir,phoenix-heex,html"},"eex: Return contents":{"body":["<%% $0 %>"],"description":"<%% $0 %>","prefix":["plvs","eex","eexr","<%%"],"scope":"elixir,phoenix-heex,html"},"eex: cond":{"body":["<%= cond do %>","  <% $1 -> %>","    $2","<% end %>"],"description":"<%= cond do %>\n  <% $1 -> %>\n    $2\n<% end %>","prefix":["plvs","eex","eexcond","<% cond"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Component definition":{"body":["def ${1:component}(${2:assigns}) do","  ~H\"\"\"","  $3","  \"\"\"","end"],"description":"def ${1:component}(${2:assigns}) do\n  ~H\"\"\"\n  $3\n  \"\"\"\nend","prefix":["plvs","pc","pcd"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent assign helper":{"body":["def assign_$1(socket, $1) do","  assign(socket, $1: $1)","end"],"description":"def assign_$1(socket, $1) do\n  assign(socket, $1: $1)\nend","prefix":["plvs","plc","plca","plcah"],"scope":"elixir,phoenix-heex,html"},"LiveView: Phoenix.LiveComponent update":{"body":["@impl Phoenix.LiveComponent","def update(${1:assigns}, ${2:socket}) do","  $0","","  {:ok, socket}","end"],"description":"@impl Phoenix.LiveComponent\ndef update(${1:assigns}, ${2:socket}) do\n  $0\n\n  {:ok, socket}\nend","prefix":["plvs","plc","plcu"],"scope":"elixir,phoenix-heex,html"},"Phoenix: Context create":{"body":["@doc \"\"\"","Creates a $1.","","## Examples","","    iex> create_$1(%{field: value})","    {:ok, %${1/(.*)/${1:/pascalcase}/}{}}","","    iex> create_$1(%{field: bad_value})","    {:error, ...}","","\"\"\"","def create_${1:name}(attrs \\\\\\\\ %{}) do","  %${1/(.*)/${1:/pascalcase}/}{}","  |> ${1/(.*)/${1:/pascalcase}/}.changeset(attrs)","  |> Repo.insert()","end",""],"description":"@doc \"\"\"\nCreates a $1.\n\n## Examples\n\n    iex> create_$1(%{field: value})\n    {:ok, %${1/(.*)/${1:/pascalcase}/}{}}\n\n    iex> create_$1(%{field: bad_value})\n    {:error, ...}\n\n\"\"\"\ndef create_${1:name}(attrs \\\\\\\\ %{}) do\n  %${1/(.*)/${1:/pascalcase}/}{}\n  |> ${1/(.*)/${1:/pascalcase}/}.changeset(attrs)\n  |> Repo.insert()\nend\n","prefix":["plvs","pctx","pctxcr"],"scope":"elixir,phoenix-heex,html"},"LiveView: render implementation":{"body":["@impl Phoenix.LiveView","def render(${1:assigns}) do","  ~H\"\"\"","  $0","  \"\"\"","end",""],"description":"@impl Phoenix.LiveView\ndef render(${1:assigns}) do\n  ~H\"\"\"\n  $0\n  \"\"\"\nend\n","prefix":["plvs","plv","plvr"],"scope":"elixir,phoenix-heex,html"},"eex: Replace with result":{"body":["<%= $0 %>"],"description":"<%= $0 %>","prefix":["plvs","eex","<%="],"scope":"elixir,phoenix-heex,html"},"eex: case":{"body":["<% case $1 do %>","  <% $2 -> %>","<% end %>"],"description":"<% case $1 do %>\n  <% $2 -> %>\n<% end %>","prefix":["plvs","eex","eexcase","<% case"],"scope":"elixir,phoenix-heex,html"}}